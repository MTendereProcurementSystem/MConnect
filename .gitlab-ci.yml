# This file is a template, and might need editing before it works on your project.
# Official docker image.
image: docker:stable


stages:
  - pre
  - build
  - test
  - deploy

services:
  - docker:18-dind


variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://localhost:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  
build:prod:
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    - master

build:tags:
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
  - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" .
  - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
  only:
  - tags
  
build:test:
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
    - docker build  --build-arg env=Test --pull -t "$CI_REGISTRY_IMAGE:test" .
    - docker push "$CI_REGISTRY_IMAGE:test"
  only:
    - master

build:dev:
  before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  stage: build
  script:
    - docker build  --build-arg env=Development --pull -t "$CI_REGISTRY_IMAGE:dev" .
    - docker push "$CI_REGISTRY_IMAGE:dev"
  only:
    - master


test:prod:
  image: newtmitch/sonar-scanner
  stage: test
  script: 
    - sonar-scanner   -Dsonar.projectName=$CI_PROJECT_NAME -Dsonar.projectKey=$CI_PROJECT_NAME   -Dsonar.projectBaseDir=.   -Dsonar.sources=.   -Dsonar.host.url=http://sq.esempla.com   -Dsonar.login=$SONAR_TOKEN -Dsonar.language=php -Dsonar.gitlab.project_id=$CI_PROJECT_ID -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
  only:
    - master
  allow_failure: true



deploy:prod:
  image: lachlanevenson/k8s-kubectl:latest
  stage: deploy
  script:
    - cd docker/master/
    - sed -i "s/ENV_CI_ENVIRONMENT_SLUG/${CI_ENVIRONMENT_SLUG}/" mconnect-deployment.yaml
    - kubectl delete -f mconnect-deployment.yaml
    - kubectl create -f mconnect-deployment.yaml
  environment:
    name: production
  when: manual
  only:
    - master